{"version":3,"sources":["src/pageLayout.js","src/count.js","App.js","reportWebVitals.js","index.js"],"names":["PageLayout","props","state","uniteData","selectedPokemon","_selectPokemon","bind","_generatePokemonNameDisplay","fetch","then","resp","json","setState","pokeID","newSelPokemon","this","pokeIDIdx","indexOf","splice","push","pokemonDisplay","forEach","value","activePoke","className","onClick","itemWeightData","pokemonData","itemWeights","itemPokemonMapping","datum","pokemonName","name","weightFactor","builds","length","buildDatum","held_items","heldItem","undefined","itemWeightArray","Object","keys","itemName","sort","a","b","output","key","itemWeight","pokemonList","weightItemUsage","filter","console","log","itemWeightRows","idx","join","itemTable","_generateItemPrioritizationTable","Component","App","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0b4abc2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { weightItemUsage } from \"./count\";\nimport '../css/pageLayout.css';\n\n\nclass PageLayout extends Component {\n    constructor(props) {\n        super(props);\n\n        // Get everything set up\n        this.state = {\n            uniteData: [],\n            selectedPokemon: []\n        }\n\n        // Bind Functions\n        this._selectPokemon = this._selectPokemon.bind(this);\n        this._generatePokemonNameDisplay = this._generatePokemonNameDisplay.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://unite-db.com/pokemon.json\").then(resp => {\n            return resp.json();\n        }).then((uniteData) => {\n            this.setState({\n                uniteData: uniteData\n            })\n        })\n    }\n\n    _selectPokemon(pokeID) {\n        const newSelPokemon = this.state.selectedPokemon;\n        const pokeIDIdx = this.state.selectedPokemon.indexOf(pokeID);\n        if (pokeIDIdx !== -1) {\n            newSelPokemon.splice(pokeIDIdx, 1)\n        } else {\n            newSelPokemon.push(pokeID);\n        }\n        this.setState({\n            selectedPokemon: newSelPokemon\n        })\n    }\n\n    _generatePokemonNameDisplay() {\n        const pokemonDisplay = []\n        this.state.uniteData.forEach((value) => {\n            const pokeID = value[\"id\"]\n            const activePoke = (this.state.selectedPokemon.indexOf(pokeID) !== -1)\n            pokemonDisplay.push(\n                <div className={\"pokemon-icon \" + (activePoke ? \"active\" : \"\")}\n                    onClick={() => this._selectPokemon(pokeID)}>{value[\"name\"]}</div>\n            )\n        })\n        return <div className=\"pokemon-display\">{pokemonDisplay}</div>\n    }\n\n    _generateItemPrioritizationTable() {\n        const pokemonData = this.state.uniteData.filter((datum) => {\n            // Only want to count items for pokemon who are chosen\n            return this.state.selectedPokemon.indexOf(datum[\"id\"]) === -1 ? false : true\n        })\n        const itemWeightData = weightItemUsage(pokemonData)\n        console.log(itemWeightData)\n\n        const itemWeightRows = []\n        itemWeightData.forEach((datum, idx) => {\n            itemWeightRows.push(<tr key={datum.key}>\n                <td>{idx + 1}</td>\n                <td>{datum.name}</td>\n                <td>{datum.itemWeight}</td>\n                <td>{datum.pokemonList.join(\", \")}</td>\n            </tr>)\n        })\n\n        return <table>\n                <thead>\n                    <tr>\n                        <th>Rank</th>\n                        <th>Name</th>\n                        <th>Weight</th>\n                        <th>Pok&eacute;mon</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {itemWeightRows}\n                </tbody>\n            </table>\n        \n    }\n\n    render() {\n        let itemTable = <i>Select a Pok&eacute;mon above!</i>\n        if (this.state.selectedPokemon.length !== 0) {\n            itemTable = this._generateItemPrioritizationTable()\n        }\n        return <div className=\"page-layout\">\n            <h1>Choose your Pok&eacute;mon!</h1>\n            {this._generatePokemonNameDisplay()}\n\n            <h1>Suggested Item Prioritization</h1>\n            <div className=\"weight-table\">\n                {itemTable}\n            </div>\n        </div>\n    }\n}\n\nexport default PageLayout;","export function weightItemUsage(pokemonData) {\n    // pokemonData is an sub-array of the pokemon-DB one with only chosen Pokemon\n    const itemWeights = {}\n    const itemPokemonMapping = {}\n    pokemonData.forEach(datum => {\n        // Weight inversely by number of sets a pokemon has\n        // if lots of viable items then each has low weight\n        const pokemonName = datum.name\n        const weightFactor = 1 / datum.builds.length;\n        datum.builds.forEach(buildDatum => {\n            buildDatum.held_items.forEach(heldItem => {\n                // set the weights\n                if (itemWeights[heldItem] === undefined) {\n                    itemWeights[heldItem] = 0\n                }\n                itemWeights[heldItem] += weightFactor\n\n                // add the pokemon\n                if (itemPokemonMapping[heldItem] === undefined) {\n                    itemPokemonMapping[heldItem] = []\n                }\n                if (itemPokemonMapping[heldItem].indexOf(pokemonName) === -1) {\n                    itemPokemonMapping[heldItem].push(pokemonName)\n                }\n            }) \n        })\n    })\n\n    // Sort the item weight by the number of sets that have it\n    const itemWeightArray = []\n    Object.keys(itemWeights).forEach(itemName => {\n        itemWeightArray.push([itemName, itemWeights[itemName]]);\n    })\n    itemWeightArray.sort(function (a, b) {return b[1] - a[1]; })\n\n    // Sort the pokemon names in the item-pokemon mapping\n    Object.keys(itemPokemonMapping).forEach(itemName => {\n        itemPokemonMapping[itemName].sort()\n    })\n\n    const output = []\n    // Final data construction; list of objects\n    itemWeightArray.forEach(datum => {\n        const itemName = datum[0]\n        output.push({\n            key: itemName,\n            name: itemName,\n            itemWeight: datum[1],\n            pokemonList: itemPokemonMapping[itemName]\n        })\n    })\n\n    return output\n}","import PageLayout from './src/pageLayout';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <PageLayout />\n        <div className=\"misc\">\n          <h1>Purpose/Explanation of Weighting</h1>\n          <p>\n            The purpose of this site is to help players prioritize their item enhancers for the Pok&eacute;mon they plan to play.\n            Items that are useful on many Pok&eacute;mon are given higher weighting than ones who only have a few Pok&eacute;mon using them.\n          </p>\n          <p>\n            Data for recommended builds taken from <a href=\"https://unite-db.com\">www.unite-db.com</a>. \n            Each Pok&eacute;mon's build is weighted by the total number of builds available for that Pok&eacute;mon (if Venusaur has 2 builds, then each build's items would contribute weight of 0.5); this is to prevent Pok&eacute;mon with a large number of sets from skewing the weight in their favor.\n            These weights are aggregated across all the sets for all the chosen Pok&eacute;mon, and sorted for display in a table.\n          </p>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}