{"version":3,"sources":["src/pageLayout.js","src/count.js","App.js","reportWebVitals.js","index.js"],"names":["PageLayout","props","state","uniteData","selectedPokemon","_selectPokemon","bind","_generatePokemonNameDisplay","fetch","then","resp","json","setState","pokeID","newSelPokemon","this","pokeIDIdx","indexOf","splice","push","pokemonDisplay","forEach","value","activePoke","imgSrc","replace","toLowerCase","className","onClick","src","alt","itemWeightData","pokemonData","itemWeights","itemPokemonMapping","datum","pokemonName","name","weightFactor","builds","length","buildDatum","held_items","heldItem","undefined","itemWeightArray","Object","keys","itemName","sort","a","b","output","key","itemWeight","pokemonList","weightItemUsage","filter","console","log","itemWeightRows","idx","join","itemTable","_generateItemPrioritizationTable","Component","App","href","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff0eb707.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport { weightItemUsage } from \"./count\";\r\nimport '../css/pageLayout.css';\r\n\r\n\r\nclass PageLayout extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get everything set up\r\n        this.state = {\r\n            uniteData: [],\r\n            selectedPokemon: []\r\n        }\r\n\r\n        // Bind Functions\r\n        this._selectPokemon = this._selectPokemon.bind(this);\r\n        this._generatePokemonNameDisplay = this._generatePokemonNameDisplay.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://unite-db.com/pokemon.json\").then(resp => {\r\n            return resp.json();\r\n        }).then((uniteData) => {\r\n            this.setState({\r\n                uniteData: uniteData\r\n            })\r\n        })\r\n    }\r\n\r\n    _selectPokemon(pokeID) {\r\n        const newSelPokemon = this.state.selectedPokemon;\r\n        const pokeIDIdx = this.state.selectedPokemon.indexOf(pokeID);\r\n        if (pokeIDIdx !== -1) {\r\n            newSelPokemon.splice(pokeIDIdx, 1)\r\n        } else {\r\n            newSelPokemon.push(pokeID);\r\n        }\r\n        this.setState({\r\n            selectedPokemon: newSelPokemon\r\n        })\r\n    }\r\n\r\n    _generatePokemonNameDisplay() {\r\n        const pokemonDisplay = []\r\n        this.state.uniteData.forEach((value) => {\r\n            const pokeID = value[\"id\"]\r\n            const activePoke = (this.state.selectedPokemon.indexOf(pokeID) !== -1)\r\n            const imgSrc = \"https://play.pokemonshowdown.com/sprites/dex/\" + value[\"name\"].replace(\".\", \"\").toLowerCase() + \".png\"\r\n            pokemonDisplay.push(\r\n                <div className={\"pokemon-icon \" + (activePoke ? \"active\" : \"\")}\r\n                    onClick={() => this._selectPokemon(pokeID)}>\r\n                        <img className={\"select-img \" + (activePoke ? \"active-img\" : \"\")}\r\n                            src={imgSrc} alt={value[\"name\"]}/>\r\n                    </div>\r\n            )\r\n        })\r\n        return <div className=\"pokemon-display\">{pokemonDisplay}</div>\r\n    }\r\n\r\n    _generateItemPrioritizationTable() {\r\n        const pokemonData = this.state.uniteData.filter((datum) => {\r\n            // Only want to count items for pokemon who are chosen\r\n            return this.state.selectedPokemon.indexOf(datum[\"id\"]) === -1 ? false : true\r\n        })\r\n        const itemWeightData = weightItemUsage(pokemonData)\r\n        console.log(itemWeightData)\r\n\r\n        const itemWeightRows = []\r\n        itemWeightData.forEach((datum, idx) => {\r\n            itemWeightRows.push(<tr key={datum.key}>\r\n                <td>{idx + 1}</td>\r\n                <td>{datum.name}</td>\r\n                <td>{datum.itemWeight}</td>\r\n                <td>{datum.pokemonList.join(\", \")}</td>\r\n            </tr>)\r\n        })\r\n\r\n        return <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Rank</th>\r\n                        <th>Name</th>\r\n                        <th>Weight</th>\r\n                        <th>Pok&eacute;mon</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {itemWeightRows}\r\n                </tbody>\r\n            </table>\r\n        \r\n    }\r\n\r\n    render() {\r\n        let itemTable = <i>Select a Pok&eacute;mon above!</i>\r\n        if (this.state.selectedPokemon.length !== 0) {\r\n            itemTable = this._generateItemPrioritizationTable()\r\n        }\r\n        return <div className=\"page-layout\">\r\n            <h1>Choose your Pok&eacute;mon!</h1>\r\n            {this._generatePokemonNameDisplay()}\r\n\r\n            <h1>Suggested Item Prioritization</h1>\r\n            <div className=\"weight-table\">\r\n                {itemTable}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default PageLayout;","export function weightItemUsage(pokemonData) {\r\n    // pokemonData is an sub-array of the pokemon-DB one with only chosen Pokemon\r\n    const itemWeights = {}\r\n    const itemPokemonMapping = {}\r\n    pokemonData.forEach(datum => {\r\n        // Weight inversely by number of sets a pokemon has\r\n        // if lots of viable items then each has low weight\r\n        const pokemonName = datum.name\r\n        const weightFactor = 1 / datum.builds.length;\r\n        datum.builds.forEach(buildDatum => {\r\n            buildDatum.held_items.forEach(heldItem => {\r\n                // set the weights\r\n                if (itemWeights[heldItem] === undefined) {\r\n                    itemWeights[heldItem] = 0\r\n                }\r\n                itemWeights[heldItem] += weightFactor\r\n\r\n                // add the pokemon\r\n                if (itemPokemonMapping[heldItem] === undefined) {\r\n                    itemPokemonMapping[heldItem] = []\r\n                }\r\n                if (itemPokemonMapping[heldItem].indexOf(pokemonName) === -1) {\r\n                    itemPokemonMapping[heldItem].push(pokemonName)\r\n                }\r\n            }) \r\n        })\r\n    })\r\n\r\n    // Sort the item weight by the number of sets that have it\r\n    const itemWeightArray = []\r\n    Object.keys(itemWeights).forEach(itemName => {\r\n        itemWeightArray.push([itemName, itemWeights[itemName]]);\r\n    })\r\n    itemWeightArray.sort(function (a, b) {return b[1] - a[1]; })\r\n\r\n    // Sort the pokemon names in the item-pokemon mapping\r\n    Object.keys(itemPokemonMapping).forEach(itemName => {\r\n        itemPokemonMapping[itemName].sort()\r\n    })\r\n\r\n    const output = []\r\n    // Final data construction; list of objects\r\n    itemWeightArray.forEach(datum => {\r\n        const itemName = datum[0]\r\n        output.push({\r\n            key: itemName,\r\n            name: itemName,\r\n            itemWeight: datum[1],\r\n            pokemonList: itemPokemonMapping[itemName]\r\n        })\r\n    })\r\n\r\n    return output\r\n}","import PageLayout from './src/pageLayout';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <PageLayout />\r\n        <div className=\"misc\">\r\n          <h1>Purpose</h1>\r\n          <p>\r\n            The purpose of this site is to help players prioritize their item enhancers for the Pok&eacute;mon they plan to play.\r\n            Items that are useful on many Pok&eacute;mon are given higher weighting than ones who only have a few Pok&eacute;mon using them.\r\n            The weighting assumes that Pok&eacute;mon will be played roughly equally, so bear in mind your preferences when deciding how to use your item enhancers.\r\n          </p>\r\n          <h1>Explanation of Weighting</h1>\r\n          <p>\r\n            Data for recommended builds taken from <a href=\"https://unite-db.com\">www.unite-db.com</a>. Each Pok&eacute;mon's build is weighted by the total number of builds available for that Pok&eacute;mon; this is to prevent Pok&eacute;mon with a large number of sets from skewing the weight in their favor.\r\n            These weights are aggregated across all the sets for all the chosen Pok&eacute;mon, and sorted for display in a table. The more sets that use an item, the higher its weight and by extension the more highly it should be prioritized.\r\n          </p>\r\n          <p>\r\n            For example, suppose I want to play Blastoise, Venusaur, and Eldegoss, who have the recommended held items listed below.\r\n          </p>\r\n          <ul style={{\"textAlign\":\"left\"}}>\r\n              <li><b>Venusaur #1</b>: Buddy Barrier, Focus Band, Muscle Band</li>\r\n              <li><b>Blastoise #1</b>: Buddy Barrier, Muscle Band, Score Shield</li>\r\n              <li><b>Blastoise #2</b>: Buddy Barrier, Focus Band, Muscle Band</li>\r\n              <li><b>Eldegoss #1</b>: Buddy Barrier, Muscle Band, Exp. Share</li>\r\n              <li><b>Eldegoss #2</b>: Buddy Barrier, Muscle Band, Score Shield</li>\r\n            </ul>\r\n          <p>\r\n            The weight calculations are described below.\r\n          </p>\r\n          <ol style={{\"textAlign\":\"left\"}}>\r\n              <li><b>Venusaur</b>\r\n                <ul>\r\n                  <li>Since Venusaur only has one set, I <u>add a weight of 1 to each of Buddy Barrier, Focus Band, and Muscle Band</u>.</li>\r\n                </ul>\r\n              </li>\r\n              <li>\r\n                <b>Blastoise</b>\r\n                <ul>\r\n                  <li>Since Blastoise has two sets, each set provides a weight of 0.5.</li>\r\n                  <li>From the first set I <u>add a weight of 0.5 to each of Buddy Barrier, Muscle Band, and Score Shield</u>.</li>\r\n                  <li>Looking to Blastoise's second set, I <u>add a weight of 0.5 to each of Buddy Barrier, Focus Band, and Muscle Band</u>.</li>\r\n                </ul>\r\n              </li>\r\n              <li><b>Eldegoss</b>\r\n              <ul>\r\n                  <li>Since Eldegoss has two sets, each set provides a weight of 0.5.</li>\r\n                  <li>From the first set I <u>add a weight of 0.5 to Buddy Barrier, Muscle Band, and Exp. Share</u>.</li>\r\n                  <li>Looking to Eldegoss's second set, I <u>add a weight of 0.5 to Buddy Barrier, Muscle Band, and Score Shield</u></li>\r\n                </ul>\r\n              </li>\r\n              <li>\r\n                <i>Final Weights</i>\r\n              </li>\r\n              <ul>\r\n                <li>Buddy Barrier: Weight of 3 (1 + 0.5 + 0.5 + 0.5 + 0.5) from all 3 Pok&eacute;mon</li>\r\n                <li>Muscle Band: Weight of 3 (1 + 0.5 + 0.5 + 0.5 + 0.5) from all 3 Pok&eacute;mon</li>\r\n                <li>Focus Band: Weight of 1.5 (1 + 0.5) from Venusaur and Blastoise</li>\r\n                <li>Score Shield: Weight of 1 (0.5 + 0.5) from Blastoise and Eldegoss</li>\r\n                <li>Exp. Share: Weight of 0.5 (0.5) from Eldegoss</li>\r\n              </ul>\r\n            </ol>\r\n          <p>\r\n            Without getting too bogged down by the numbers, it should be apparent that Buddy Barrier and Muscle Band are integral to all three of the Pok&eacute;mon I want to play (every set for every pokemon uses them), and should be prioritized before any other items. From here, the prioriziation is a bit flexible since there are no stand-out items (the weights and number of Pok&eacute;mon they come from aren't all that different).\r\n          </p>\r\n          <p\r\n            >Once again, it helps to bear in mind this weighting assumes the player will play the selected Pok&eacute;mon roughly equally; if I were plannig to play Eldegoss 90% of the time I should prioritize the items that Eldegoss benefits from, even if they have lower overall weight.\r\n          </p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}